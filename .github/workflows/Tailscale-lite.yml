name: Check and Build Tailscale-lite New Version

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # 每周检查一次（周日凌晨）

jobs:
  check-tailscale-version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.set_output.outputs.latest_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get latest Tailscale version
      id: get_version
      run: |
        latest_version=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | jq -r .tag_name)
        echo "latest_version=${latest_version}" >> $GITHUB_ENV

    - name: Set output
      id: set_output
      run: |
        echo "LATEST_VERSION=${{ env.latest_version }}" >> $GITHUB_ENV
        echo "LATEST_VERSION=${{ env.latest_version }}" >> $GITHUB_ENV

    - name: Store latest version in a file
      run: echo "${{ env.LATEST_VERSION }}" > latest_version.txt

    - name: Commit latest version if changed
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add latest_version.txt
          git commit -m "Update latest Tailscale version to ${{ env.LATEST_VERSION }}"
          git push
        else
          echo "No changes in the latest version."
        fi

  build-tailscale:
    needs: check-tailscale-version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Read current version
      id: read_version
      run: |
        CURRENT_VERSION=$(cat latest_version.txt | sed 's/^v//')
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: sudo apt-get install -y upx jq dpkg-dev

    - name: Clone Tailscale repository
      run: git clone https://github.com/tailscale/tailscale

    - name: Set VERSION_SHORT and VERSION_LONG environment variables
      run: |
        cd tailscale
        eval $(CGO_ENABLED=0 GOOS=linux GOARCH=mips go run ./cmd/mkversion)
        echo "VERSION_SHORT=${VERSION_SHORT}" >> $GITHUB_ENV
        echo "VERSION_LONG=${VERSION_LONG}" >> $GITHUB_ENV
        echo "VERSION_MINOR=${VERSION_MINOR}" >> $GITHUB_ENV
        echo "VERSION_GIT_HASH=${VERSION_GIT_HASH}" >> $GITHUB_ENV

    - name: Build and Compress Tailscale Binary for MIPS
      run: |
        cd tailscale
        go="go"
        if [ -n "${TS_USE_TOOLCHAIN:-}" ]; then
            go="./tool/go"
        fi

        eval $(CGO_ENABLED=0 GOOS=linux GOARCH=mips $go run ./cmd/mkversion)

        tags=""
        ldflags="-X tailscale.com/version.longStamp=${VERSION_LONG} -X tailscale.com/version.shortStamp=${VERSION_SHORT}"

        # Handle --extra-small flag
        ldflags="$ldflags -s -w"
        tags="${tags:+$tags,}ts_include_cli"

        # Combine the binaries into one and compress it
        GOOS=linux GOARCH=mips $go build -o ../tailscale.combined ${tags:+-tags=$tags} -ldflags "$ldflags" ./cmd/tailscaled
        du -hs ../tailscale.combined
        upx --lzma --best ../tailscale.combined
        du -hs ../tailscale.combined
        # Verify the binary size
        ls -lh ../tailscale.combined

    - name: Verify and Prepare IPK package structure
      run: |
        ls ..
        # cd ..
        if [ ! -f ../tailscale.combined ]; then
          echo "Error: tailscale.combined not found!"
          exit 1
        fi

        mkdir -p ipkg-tailscale/usr/bin
        mv tailscale.combined ipkg-tailscale/usr/bin/tailscale

        mkdir -p ipkg-tailscale/DEBIAN
        echo "Package: tailscale" > ipkg-tailscale/DEBIAN/control
        echo "Version: ${CURRENT_VERSION}" >> ipkg-tailscale/DEBIAN/control
        echo "Architecture: mips" >> ipkg-tailscale/DEBIAN/control
        echo "Maintainer: Your Name <youremail@example.com>" >> ipkg-tailscale/DEBIAN/control
        echo "Description: Tailscale binary for MIPS architecture." >> ipkg-tailscale/DEBIAN/control

    - name: Build and Rename IPK package
      run: |
        dpkg-deb --build ipkg-tailscale
        mv ipkg-tailscale.deb tailscale_${CURRENT_VERSION}_mips.ipk

    - name: List generated files
      run: ls -lh

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.CURRENT_VERSION }}
        release_name: "Release ${{ env.CURRENT_VERSION }}"
        draft: false
        prerelease: false

    - name: Upload Combined Binary Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ipkg-tailscale/usr/bin/tailscale
        asset_name: tailscale_${CURRENT_VERSION}_combined
        asset_content_type: application/octet-stream

    - name: Upload IPK Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tailscale_${CURRENT_VERSION}_mips.ipk
        asset_name: tailscale_${CURRENT_VERSION}_mips.ipk
        asset_content_type: application/octet-stream
