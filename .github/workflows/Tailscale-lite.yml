name: Check and Build Tailscale-lite New Version

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # 每周检查一次（周日凌晨）

jobs:
  check-tailscale-version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.set_output.outputs.latest_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get latest Tailscale version
      id: get_version
      uses: actions/github-script@v6
      with:
        script: |
          const fetch = require('node-fetch');
          const response = await fetch('https://api.github.com/repos/tailscale/tailscale/releases/latest');
          const data = await response.json();
          return data.tag_name;

    - name: Set output
      id: set_output
      run: echo "::set-output name=latest_version::${{ steps.get_version.outputs.result }}"

    - name: Store latest version in a file
      run: echo "${{ steps.set_output.outputs.latest_version }}" > latest_version.txt

    - name: Commit latest version if changed
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add latest_version.txt
          git commit -m "Update latest Tailscale version to ${{ steps.set_output.outputs.latest_version }}"
          git push
        else
          echo "No changes in the latest version."

  build-tailscale:
    needs: check-tailscale-version
    runs-on: ubuntu-latest
    env:
      CURRENT_VERSION: ${{ steps.read_version.outputs.current_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Read current version
      id: read_version
      run: echo "::set-output name=current_version::$(cat latest_version.txt)"

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.19'

    - name: Install dependencies
      run: sudo apt-get install -y upx

    - name: Clone Tailscale repository
      run: git clone https://github.com/tailscale/tailscale

    - name: Build Small Tailscale Binary
      run: |
        cd tailscale
        ./build_dist.sh --extra-small
        # Compress the binaries using upx
        upx --best --lzma ./cmd/tailscaled/tailscaled
        upx --best --lzma ./cmd/tailscale/tailscale
        # Verify the binary size
        ls -lh ./cmd/tailscaled/tailscaled
        ls -lh ./cmd/tailscale/tailscale

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: small-tailscaled
        path: tailscale/cmd/tailscaled/tailscaled

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: small-tailscale
        path: tailscale/cmd/tailscale/tailscale
